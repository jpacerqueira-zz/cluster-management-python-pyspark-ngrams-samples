/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2018-06-05T19:49:41.345Z
  3.18.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named dl_grid1_model_27

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http:/localhost/127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http:/localhost/127.0.0.1:54321/3/Models.java/dl_grid1_model_27 > dl_grid1_model_27.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m dl_grid1_model_27.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="dl_grid1_model_27", algorithm="deeplearning")
public class dl_grid1_model_27 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Regression; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 8; }
  public int nclasses() { return 1; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[8];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = new double[8];
    static {
      NORMMUL_0.fill(VALUES);
    }
    static final class NORMMUL_0 implements java.io.Serializable {
      static final void fill(double[] sa) {
        sa[0] = 6.746756110246437E-5;
        sa[1] = 1.9583356151736218E-5;
        sa[2] = 1.2142337778806435E-4;
        sa[3] = 6.310019674437818E-7;
        sa[4] = 1.4505322651918713E-5;
        sa[5] = 0.015605718756576311;
        sa[6] = 6.014988197646413;
        sa[7] = 0.04037515025467997;
      }
    }
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = new double[8];
    static {
      NORMSUB_0.fill(VALUES);
    }
    static final class NORMSUB_0 implements java.io.Serializable {
      static final void fill(double[] sa) {
        sa[0] = 9928.46343754193;
        sa[1] = 1.489273970416745E9;
        sa[2] = 3485.1933449617604;
        sa[3] = 580727.8168522742;
        sa[4] = 11261.39715550785;
        sa[5] = 2.8267811619482086;
        sa[6] = 0.028444921508117536;
        sa[7] = 7.452492944496708;
      }
    }
}
  // Offset into the workspace for categorical variables.
  public static final int[] CATOFFSETS = {0};
  // Standardization/Normalization scaling factor for response.
  public static final double[] NORMRESPMUL = {2.5707506315937064E-4};
  // Standardization/Normalization offset for response.
  public static final double[] NORMRESPSUB = {2935.392861934791};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {8,10,1};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ new double[8],
      /* Rectifier */ new double[10],
      /* Linear */ new double[1]
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ dl_grid1_model_27_Bias_0.VALUES,
      /* Rectifier */ dl_grid1_model_27_Bias_1.VALUES,
      /* Linear */ dl_grid1_model_27_Bias_2.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ dl_grid1_model_27_Weight_0.VALUES,
      /* Rectifier */ dl_grid1_model_27_Weight_1.VALUES,
      /* Linear */ dl_grid1_model_27_Weight_2.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_dl_grid1_model_27.VALUES;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* asn */ null,
    /* start_time_unix_time */ null,
    /* startup_time_ms */ null,
    /* playing_time_ms */ null,
    /* buffering_time_ms */ null,
    /* interrupts */ null,
    /* startup_error */ null,
    /* percentage_complete */ null,
    /* average_bitrate_kbps */ null
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = null;
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public dl_grid1_model_27() { super(NAMES,DOMAINS,"average_bitrate_kbps"); }
  public String getUUID() { return Long.toString(-7809385590645972720L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : (data[i] - NORMSUB.VALUES[i])*NORMMUL.VALUES[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        preds[1] = (ACTIVATION[i][0] / NORMRESPMUL[0] + NORMRESPSUB[0]);
        preds[1] = preds[1];
        if (Double.isNaN(preds[1])) throw new RuntimeException("Predicted regression target NaN!");
      }
    }
    preds[0] = preds[1];
    return preds;
  }
}
// Neuron bias values for Input layer
class dl_grid1_model_27_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class dl_grid1_model_27_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[10];
  static {
    dl_grid1_model_27_Bias_1_0.fill(VALUES);
  }
  static final class dl_grid1_model_27_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 36.12969028791864;
      sa[1] = -0.22845609949748708;
      sa[2] = -2.356311871590039;
      sa[3] = -0.3515751606170249;
      sa[4] = -0.45439511782811753;
      sa[5] = -1.7526597080211384;
      sa[6] = -0.03885766721672949;
      sa[7] = -0.3299009820069057;
      sa[8] = -0.6801962990874157;
      sa[9] = -0.26094615477612537;
    }
  }
}
// Neuron bias values for Linear layer
class dl_grid1_model_27_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[1];
  static {
    dl_grid1_model_27_Bias_2_0.fill(VALUES);
  }
  static final class dl_grid1_model_27_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -1.470100448384897;
    }
  }
}
class dl_grid1_model_27_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class dl_grid1_model_27_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[80];
  static {
    dl_grid1_model_27_Weight_1_0.fill(VALUES);
  }
  static final class dl_grid1_model_27_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = -1.4867374f;
      sa[1] = -0.5433145f;
      sa[2] = -12.944704f;
      sa[3] = -4.6467476f;
      sa[4] = 8.315809f;
      sa[5] = 18.23933f;
      sa[6] = -3.2374628f;
      sa[7] = 4.762528f;
      sa[8] = 0.047980953f;
      sa[9] = 0.011101378f;
      sa[10] = 0.2986421f;
      sa[11] = 0.050552063f;
      sa[12] = 0.22724807f;
      sa[13] = 0.24235953f;
      sa[14] = -0.16270684f;
      sa[15] = 0.05564423f;
      sa[16] = -0.0011267131f;
      sa[17] = 4.0418367E-4f;
      sa[18] = -5.794883f;
      sa[19] = 0.07031031f;
      sa[20] = -0.012651196f;
      sa[21] = -0.086048685f;
      sa[22] = -0.017729977f;
      sa[23] = 0.0011368279f;
      sa[24] = 0.12994365f;
      sa[25] = 0.018214777f;
      sa[26] = 0.14183822f;
      sa[27] = 0.06127414f;
      sa[28] = 0.17253049f;
      sa[29] = 0.35547832f;
      sa[30] = 0.008421359f;
      sa[31] = 0.08512525f;
      sa[32] = 0.2705286f;
      sa[33] = -0.14614032f;
      sa[34] = -0.06931145f;
      sa[35] = -0.11439081f;
      sa[36] = -0.25490856f;
      sa[37] = -1.6909666f;
      sa[38] = 0.04616476f;
      sa[39] = -0.1337185f;
      sa[40] = -8.955438E-4f;
      sa[41] = -0.0028669958f;
      sa[42] = 0.0029611029f;
      sa[43] = -4.8914323f;
      sa[44] = 0.008997786f;
      sa[45] = 0.025919521f;
      sa[46] = -0.0067364355f;
      sa[47] = 0.014174142f;
      sa[48] = 0.042935885f;
      sa[49] = 0.07250414f;
      sa[50] = 4.89521f;
      sa[51] = 3.014814f;
      sa[52] = -0.023875432f;
      sa[53] = 0.89474535f;
      sa[54] = -0.03069056f;
      sa[55] = -0.05099537f;
      sa[56] = 0.014052955f;
      sa[57] = -0.07606422f;
      sa[58] = 0.088305406f;
      sa[59] = 0.03956669f;
      sa[60] = 0.02738497f;
      sa[61] = -6.043726f;
      sa[62] = -3.2580312E-4f;
      sa[63] = -0.03079185f;
      sa[64] = 0.5058229f;
      sa[65] = -0.05923161f;
      sa[66] = 0.77479523f;
      sa[67] = -0.059949197f;
      sa[68] = 0.19429436f;
      sa[69] = -4.016837f;
      sa[70] = 0.06564931f;
      sa[71] = -0.5215853f;
      sa[72] = 0.0012557178f;
      sa[73] = -0.077366196f;
      sa[74] = 0.47847927f;
      sa[75] = 0.24777572f;
      sa[76] = -0.010349921f;
      sa[77] = 0.12437759f;
      sa[78] = -0.0285219f;
      sa[79] = 0.050483078f;
    }
  }
}
// Neuron weights connecting Rectifier and Linear layer
class dl_grid1_model_27_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[10];
  static {
    dl_grid1_model_27_Weight_2_0.fill(VALUES);
  }
  static final class dl_grid1_model_27_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.04110247f;
      sa[1] = -1.1591951f;
      sa[2] = -7.6804957f;
      sa[3] = -0.90198267f;
      sa[4] = -0.56030184f;
      sa[5] = -15.550906f;
      sa[6] = 0.20739616f;
      sa[7] = -2.604159f;
      sa[8] = 0.645999f;
      sa[9] = -1.5012265f;
    }
  }
}
// The class representing training column names
class NamesHolder_dl_grid1_model_27 implements java.io.Serializable {
  public static final String[] VALUES = new String[8];
  static {
    NamesHolder_dl_grid1_model_27_0.fill(VALUES);
  }
  static final class NamesHolder_dl_grid1_model_27_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "asn";
      sa[1] = "start_time_unix_time";
      sa[2] = "startup_time_ms";
      sa[3] = "playing_time_ms";
      sa[4] = "buffering_time_ms";
      sa[5] = "interrupts";
      sa[6] = "startup_error";
      sa[7] = "percentage_complete";
    }
  }
}

