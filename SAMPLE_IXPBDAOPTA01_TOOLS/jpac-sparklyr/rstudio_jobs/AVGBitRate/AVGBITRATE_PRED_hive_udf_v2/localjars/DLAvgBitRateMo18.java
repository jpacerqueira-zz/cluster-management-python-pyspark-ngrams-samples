/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2018-08-20T15:43:01.516Z
  3.18.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named DLAvgBitRateMo18

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http:/localhost/127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http:/localhost/127.0.0.1:54321/3/Models.java/DLAvgBitRateMo18 > DLAvgBitRateMo18.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m DLAvgBitRateMo18.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
package ai.h2o.hive.udf; import java.util.Map;
package ai.h2o.hive.udf; import hex.genmodel.GenModel;
package ai.h2o.hive.udf; import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="DLAvgBitRateMo18", algorithm="deeplearning")
public class DLAvgBitRateMo18 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Regression; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 7; }
  public int nclasses() { return 1; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[7];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = new double[7];
    static {
      NORMMUL_0.fill(VALUES);
    }
    static final class NORMMUL_0 implements java.io.Serializable {
      static final void fill(double[] sa) {
        sa[0] = 1.1554492641362072E-4;
        sa[1] = 2.931019586928039E-4;
        sa[2] = 1.42405597256373E-4;
        sa[3] = 4.4507083173539935E-7;
        sa[4] = 8.346026346107338E-6;
        sa[5] = 0.016540929388273493;
        sa[6] = 7.667793710214789;
      }
    }
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = new double[7];
    static {
      NORMSUB_0.fill(VALUES);
    }
    static final class NORMSUB_0 implements java.io.Serializable {
      static final void fill(double[] sa) {
        sa[0] = 8923.282312322948;
        sa[1] = 1.4892299349294436E9;
        sa[2] = 3814.796343838527;
        sa[3] = 1150953.8177673512;
        sa[4] = 11670.61729815864;
        sa[5] = 3.04005842776204;
        sa[6] = 0.017307011331444758;
      }
    }
}
  // Offset into the workspace for categorical variables.
  public static final int[] CATOFFSETS = {0};
  // Standardization/Normalization scaling factor for response.
  public static final double[] NORMRESPMUL = {3.322049672432153E-4};
  // Standardization/Normalization offset for response.
  public static final double[] NORMRESPSUB = {2865.796388101983};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {7,5,1};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ new double[7],
      /* Rectifier */ new double[5],
      /* Linear */ new double[1]
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ DLAvgBitRateMo18_Bias_0.VALUES,
      /* Rectifier */ DLAvgBitRateMo18_Bias_1.VALUES,
      /* Linear */ DLAvgBitRateMo18_Bias_2.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ DLAvgBitRateMo18_Weight_0.VALUES,
      /* Rectifier */ DLAvgBitRateMo18_Weight_1.VALUES,
      /* Linear */ DLAvgBitRateMo18_Weight_2.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_DLAvgBitRateMo18.VALUES;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* asn */ null,
    /* start_time_unix_time */ null,
    /* startup_time_ms */ null,
    /* playing_time_ms */ null,
    /* buffering_time_ms */ null,
    /* interrupts */ null,
    /* startup_error */ null,
    /* average_bitrate_kbps */ null
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = null;
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public DLAvgBitRateMo18() { super(NAMES,DOMAINS,"average_bitrate_kbps"); }
  public String getUUID() { return Long.toString(-7868603346018945920L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : (data[i] - NORMSUB.VALUES[i])*NORMMUL.VALUES[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        preds[1] = (ACTIVATION[i][0] / NORMRESPMUL[0] + NORMRESPSUB[0]);
        preds[1] = preds[1];
        if (Double.isNaN(preds[1])) throw new RuntimeException("Predicted regression target NaN!");
      }
    }
    preds[0] = preds[1];
    return preds;
  }
}
// Neuron bias values for Input layer
class DLAvgBitRateMo18_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class DLAvgBitRateMo18_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    DLAvgBitRateMo18_Bias_1_0.fill(VALUES);
  }
  static final class DLAvgBitRateMo18_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -2.6740825335316103;
      sa[1] = -0.11854291967522668;
      sa[2] = -2.9918123701440886;
      sa[3] = -2.527214318070838;
      sa[4] = 0.2923646252554143;
    }
  }
}
// Neuron bias values for Linear layer
class DLAvgBitRateMo18_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[1];
  static {
    DLAvgBitRateMo18_Bias_2_0.fill(VALUES);
  }
  static final class DLAvgBitRateMo18_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 1.331172723160147;
    }
  }
}
class DLAvgBitRateMo18_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class DLAvgBitRateMo18_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[35];
  static {
    DLAvgBitRateMo18_Weight_1_0.fill(VALUES);
  }
  static final class DLAvgBitRateMo18_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = -0.0027329605f;
      sa[1] = -0.010542162f;
      sa[2] = -0.034560427f;
      sa[3] = -5.6536307f;
      sa[4] = 0.009837446f;
      sa[5] = 0.061151676f;
      sa[6] = -0.037967276f;
      sa[7] = 0.021582473f;
      sa[8] = 0.024467206f;
      sa[9] = -0.1047003f;
      sa[10] = -0.0155458795f;
      sa[11] = 0.012902803f;
      sa[12] = -2.7877772f;
      sa[13] = 0.09700333f;
      sa[14] = 0.0037661726f;
      sa[15] = -0.0076168324f;
      sa[16] = -2.9080994f;
      sa[17] = 0.13054112f;
      sa[18] = -0.8370029f;
      sa[19] = 0.038442705f;
      sa[20] = -0.15438907f;
      sa[21] = 0.044676974f;
      sa[22] = -0.013123645f;
      sa[23] = -2.9971323f;
      sa[24] = 0.15428026f;
      sa[25] = -0.45561224f;
      sa[26] = -0.6353061f;
      sa[27] = -0.15486673f;
      sa[28] = -0.07477265f;
      sa[29] = -0.44193792f;
      sa[30] = 0.13003406f;
      sa[31] = 0.39135408f;
      sa[32] = -0.12238551f;
      sa[33] = -0.5499208f;
      sa[34] = -0.23703814f;
    }
  }
}
// Neuron weights connecting Rectifier and Linear layer
class DLAvgBitRateMo18_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[5];
  static {
    DLAvgBitRateMo18_Weight_2_0.fill(VALUES);
  }
  static final class DLAvgBitRateMo18_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = -7.22893f;
      sa[1] = -3.3287811f;
      sa[2] = -1.2986928f;
      sa[3] = -1.436129f;
      sa[4] = 0.05085247f;
    }
  }
}
// The class representing training column names
class NamesHolder_DLAvgBitRateMo18 implements java.io.Serializable {
  public static final String[] VALUES = new String[7];
  static {
    NamesHolder_DLAvgBitRateMo18_0.fill(VALUES);
  }
  static final class NamesHolder_DLAvgBitRateMo18_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "asn";
      sa[1] = "start_time_unix_time";
      sa[2] = "startup_time_ms";
      sa[3] = "playing_time_ms";
      sa[4] = "buffering_time_ms";
      sa[5] = "interrupts";
      sa[6] = "startup_error";
    }
  }
}


