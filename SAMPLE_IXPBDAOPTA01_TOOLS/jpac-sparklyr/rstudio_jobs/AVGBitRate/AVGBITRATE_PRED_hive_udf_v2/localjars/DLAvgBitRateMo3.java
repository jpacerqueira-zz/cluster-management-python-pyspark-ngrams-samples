/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2018-07-26T14:27:12.636Z
  3.18.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named DLAvgBitRateMo3

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http:/localhost/127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http:/localhost/127.0.0.1:54321/3/Models.java/DLAvgBitRateMo3 > DLAvgBitRateMo3.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m DLAvgBitRateMo3.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
package ai.h2o.hive.udf; import java.util.Map;
package ai.h2o.hive.udf; import hex.genmodel.GenModel;
package ai.h2o.hive.udf; import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="DLAvgBitRateMo3", algorithm="deeplearning")
public class DLAvgBitRateMo3 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Regression; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 7; }
  public int nclasses() { return 1; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[7];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = new double[7];
    static {
      NORMMUL_0.fill(VALUES);
    }
    static final class NORMMUL_0 implements java.io.Serializable {
      static final void fill(double[] sa) {
        sa[0] = 1.1554492641362072E-4;
        sa[1] = 2.931019586928039E-4;
        sa[2] = 1.42405597256373E-4;
        sa[3] = 4.4507083173539935E-7;
        sa[4] = 8.346026346107338E-6;
        sa[5] = 0.016540929388273493;
        sa[6] = 7.667793710214789;
      }
    }
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = new double[7];
    static {
      NORMSUB_0.fill(VALUES);
    }
    static final class NORMSUB_0 implements java.io.Serializable {
      static final void fill(double[] sa) {
        sa[0] = 8923.282312322948;
        sa[1] = 1.4892299349294436E9;
        sa[2] = 3814.796343838527;
        sa[3] = 1150953.8177673512;
        sa[4] = 11670.61729815864;
        sa[5] = 3.04005842776204;
        sa[6] = 0.017307011331444758;
      }
    }
}
  // Offset into the workspace for categorical variables.
  public static final int[] CATOFFSETS = {0};
  // Standardization/Normalization scaling factor for response.
  public static final double[] NORMRESPMUL = {3.322049672432153E-4};
  // Standardization/Normalization offset for response.
  public static final double[] NORMRESPSUB = {2865.796388101983};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {7,10,1};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ new double[7],
      /* Rectifier */ new double[10],
      /* Linear */ new double[1]
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ DLAvgBitRateMo3_Bias_0.VALUES,
      /* Rectifier */ DLAvgBitRateMo3_Bias_1.VALUES,
      /* Linear */ DLAvgBitRateMo3_Bias_2.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ DLAvgBitRateMo3_Weight_0.VALUES,
      /* Rectifier */ DLAvgBitRateMo3_Weight_1.VALUES,
      /* Linear */ DLAvgBitRateMo3_Weight_2.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_DLAvgBitRateMo3.VALUES;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* asn */ null,
    /* start_time_unix_time */ null,
    /* startup_time_ms */ null,
    /* playing_time_ms */ null,
    /* buffering_time_ms */ null,
    /* interrupts */ null,
    /* startup_error */ null,
    /* average_bitrate_kbps */ null
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = null;
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public DLAvgBitRateMo3() { super(NAMES,DOMAINS,"average_bitrate_kbps"); }
  public String getUUID() { return Long.toString(-1293323996827025664L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : (data[i] - NORMSUB.VALUES[i])*NORMMUL.VALUES[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        preds[1] = (ACTIVATION[i][0] / NORMRESPMUL[0] + NORMRESPSUB[0]);
        preds[1] = preds[1];
        if (Double.isNaN(preds[1])) throw new RuntimeException("Predicted regression target NaN!");
      }
    }
    preds[0] = preds[1];
    return preds;
  }
}
// Neuron bias values for Input layer
class DLAvgBitRateMo3_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class DLAvgBitRateMo3_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[10];
  static {
    DLAvgBitRateMo3_Bias_1_0.fill(VALUES);
  }
  static final class DLAvgBitRateMo3_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.3783356300546584;
      sa[1] = -3.104324667266387;
      sa[2] = -0.5501825342603174;
      sa[3] = 0.03432176056139982;
      sa[4] = -0.3139065344540147;
      sa[5] = 0.1976729533798619;
      sa[6] = -2.3790370734602178;
      sa[7] = -1.5928917439839279;
      sa[8] = -2.8133252165474345;
      sa[9] = -0.0034480748942743666;
    }
  }
}
// Neuron bias values for Linear layer
class DLAvgBitRateMo3_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[1];
  static {
    DLAvgBitRateMo3_Bias_2_0.fill(VALUES);
  }
  static final class DLAvgBitRateMo3_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.6210691695007828;
    }
  }
}
class DLAvgBitRateMo3_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class DLAvgBitRateMo3_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[70];
  static {
    DLAvgBitRateMo3_Weight_1_0.fill(VALUES);
  }
  static final class DLAvgBitRateMo3_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.008811068f;
      sa[1] = 0.16649267f;
      sa[2] = -0.19465476f;
      sa[3] = -0.60765857f;
      sa[4] = -1.0837699f;
      sa[5] = -2.1895783f;
      sa[6] = 0.18798943f;
      sa[7] = 0.005703158f;
      sa[8] = -0.028241713f;
      sa[9] = -6.546389f;
      sa[10] = 0.18761851f;
      sa[11] = -0.34326303f;
      sa[12] = -0.5211125f;
      sa[13] = -0.06425041f;
      sa[14] = -0.09491224f;
      sa[15] = 0.027255679f;
      sa[16] = -3.5063136f;
      sa[17] = 3.231927f;
      sa[18] = 0.6084623f;
      sa[19] = 0.119345196f;
      sa[20] = 0.04251166f;
      sa[21] = 0.039827917f;
      sa[22] = 0.25510335f;
      sa[23] = 2.8195856f;
      sa[24] = -1.6792815f;
      sa[25] = -1.7957989f;
      sa[26] = -1.6826389f;
      sa[27] = 0.065868f;
      sa[28] = 0.6214618f;
      sa[29] = 0.45014715f;
      sa[30] = -31.022892f;
      sa[31] = -0.2045902f;
      sa[32] = -3.2112749f;
      sa[33] = -6.261519f;
      sa[34] = 0.16351616f;
      sa[35] = 0.019508649f;
      sa[36] = 0.061330434f;
      sa[37] = 1.3233225f;
      sa[38] = 1.3277509f;
      sa[39] = -1.1619238f;
      sa[40] = -3.001467f;
      sa[41] = -0.118793435f;
      sa[42] = 4.4782722E-4f;
      sa[43] = -0.009544041f;
      sa[44] = 0.032803908f;
      sa[45] = -4.8065786f;
      sa[46] = 0.042256113f;
      sa[47] = 0.050111286f;
      sa[48] = -0.011578068f;
      sa[49] = 0.11906472f;
      sa[50] = -0.034242313f;
      sa[51] = 1.3443595f;
      sa[52] = -2.3956525f;
      sa[53] = 0.23658136f;
      sa[54] = 0.31453872f;
      sa[55] = -0.20408165f;
      sa[56] = 0.34922427f;
      sa[57] = -0.09720474f;
      sa[58] = -14.318059f;
      sa[59] = 0.115930036f;
      sa[60] = -0.059804216f;
      sa[61] = 0.08724214f;
      sa[62] = 0.22763151f;
      sa[63] = -0.00650177f;
      sa[64] = 0.017813781f;
      sa[65] = -0.002100068f;
      sa[66] = 0.41572055f;
      sa[67] = -0.10344276f;
      sa[68] = -0.2163405f;
      sa[69] = -0.012658262f;
    }
  }
}
// Neuron weights connecting Rectifier and Linear layer
class DLAvgBitRateMo3_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[10];
  static {
    DLAvgBitRateMo3_Weight_2_0.fill(VALUES);
  }
  static final class DLAvgBitRateMo3_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = -0.9229038f;
      sa[1] = -2.6470282f;
      sa[2] = -0.15001659f;
      sa[3] = 0.16163436f;
      sa[4] = 0.101059236f;
      sa[5] = -0.5727018f;
      sa[6] = -9.411032f;
      sa[7] = 0.2800272f;
      sa[8] = -0.1890929f;
      sa[9] = 3.1890216f;
    }
  }
}
// The class representing training column names
class NamesHolder_DLAvgBitRateMo3 implements java.io.Serializable {
  public static final String[] VALUES = new String[7];
  static {
    NamesHolder_DLAvgBitRateMo3_0.fill(VALUES);
  }
  static final class NamesHolder_DLAvgBitRateMo3_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "asn";
      sa[1] = "start_time_unix_time";
      sa[2] = "startup_time_ms";
      sa[3] = "playing_time_ms";
      sa[4] = "buffering_time_ms";
      sa[5] = "interrupts";
      sa[6] = "startup_error";
    }
  }
}


